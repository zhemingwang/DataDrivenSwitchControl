using LinearAlgebra
using DynamicPolynomials
using SwitchOnSafety
using Combinatorics
using SparseArrays
using JuMP, Ipopt, MosekTools,NLopt
using SpecialFunctions




include("../src/RandomTrajectories.jl")
include("../src/AlgebraicLift.jl")
include("../src/ScenarioOpti.jl")
include("../src/ProbabilisticCertificates.jl")
include("../src/WhiteBoxAnalysis.jl")



dim = 2; numMode = 2; dimIn = 1

numScen_budget = 25000

#A = [[0.7218345749085846 0.013504049625046477; -0.763247200146052 0.823150250105976], [0.726724028000425 0.8385770769048322; -0.7232303846748045 0.19537267020502425]]
#B = [0.11672890767112509; 0.4312206258057798]
#A = [[-0.3734630321404846 -0.6513237917108774; 0.611847898506932 -0.14691027837992898], [0.3747919292302151 -0.08207253587307806; -0.8177042535328924 0.9426235103657543]]
#B = [-0.9774997862889991; -0.8641681288852348]


####################Example 1
A = [[-1.6856 -0.1665; 0.7785 -1.6321], [-0.2915 -3.2824; 3.9761 -0.02274]]
B = [0.1975; 0.8640]


####################Example 2
##A = [[0.4169346539518015 -0.09626692422848926; 4.265499661753648 -4.118719880693799], [-2.1543572032879177 2.4029580840965226; 0.08125960691302048 -3.470598928344031]]
##B = [-4.911690113488434; 1.893905664087379]

####################Random Example
##A = [8*rand(Float64, (dim, dim)).-4 for i=1:numMode]
##B = 2*rand(Float64, (dim, dimIn)).-1



#A = [[1.2151079530621365 -0.33531513729513973; 1.2900511328638773 -1.3708985625995862], [-0.3408550384526632 -1.4962998078843397; 0.6784775763322353 -0.5621789240840522]]
#B = [1.2212436025566022; 1.2344115037249868]
#White-box stabilization: 2.558311047916961 || K: [-1.8331184879886193 1.2753159154459983]
#JSR closed: 2.558246300039718
#N: 25000 || JSR closed 1: 2.6002448624504044 || K1: [-2.025691319888477 0.5406776018397965]
#N: 25000 || JSR closed 2: 2.1188168833776038 || K2: [-2.2516722982746136 0.9063335766321441]
#N: 25000 || JSR closed Prob1: 2.6035935786083138
#N: 25000 || JSR closed Prob2: 2.498819909826915
#********************************************************************************
#Any[2.695232520900475, 2.674074081741287, 2.729600649051829, 2.6667216693128517, 2.706072184752529, 2.702619595713564, 2.648464804760466, 2.6653129335199033, 2.665245140619883, 2.665281621475283, 2.658163946585573, 2.6708404866766746, 2.6723342532394714, 2.6384082203178854, 2.635717827065524, 2.633730855076457, 2.630347424450738, 2.632837466095163, 2.6026732357136044, 2.6026621569217685, 2.6023646183131173, 2.602361893532313, 2.6023594999299027, 2.6023573853992077, 2.6035935786083138]
#Any[3.8251690468073387, 3.20893549519724, 2.966930942539263, 2.8477772878809633, 2.772279061072514, 2.718173807725743, 2.6805996701615182, 2.651451591441884, 2.625969877375425, 2.6084164508827676, 2.5919475079323266, 2.5786916289788278, 2.566714341883191, 2.556709600267829, 2.5500015175118, 2.5422608841199703, 2.5354319232123, 2.526895233952895, 2.5257927399510214, 2.519090722975895, 2.5147916192546593, 2.511811356397815, 2.5079508952793628, 2.5020114643530764, 2.498819909826915]


##A = [[-2.9396 -3.6753; 1.8871 2.6726], [-4.1092 3.0318; 0.7372 -3.7320]]
##B = [0.2243; -3.6134]

##A = [[0.9223 0.2282; -1.2757 4.5807], [-2.5570 0.5024; 2.8555 0.7018]]
##B = [-3.0504; 2.6078]
##Any[9.0680584310352, 8.236969563479372, 5.040720605928883, 4.558580902486594, 4.490287179292396, 4.441211080373888, 4.423207321301255, 4.334792271008403, 4.389600160256621, 4.406849394359625, 4.402103593362474, 4.379457798753759, 4.380624734417577, 4.376779171976696, 4.389533867709163, 4.331405619534877, 4.366935413577316, 4.352774882451329, 4.3491741522480085, 4.353790613087748, 4.3731367194570545, 4.380324972077929, 4.379704065619696, 4.374382756817267, 4.367557105006393]
##Any[6.772360404335801, 5.34298685942547, 4.736107060832709, 4.425814269741812, 4.206162165147484, 4.058056181109807, 3.939541382590546, 3.847818018886943, 3.77855495773821, 3.718865231397386, 3.668302859622709, 3.6302297229240477, 3.5965757873267212, 3.560187164132347, 3.5348402709886293, 3.509900422563054, 3.488134646503217, 3.4694308495380604, 3.4506290076220116, 3.435153546014039, 3.420363339606061, 3.40697151166377, 3.3934353363000973, 3.382253461141298, 3.3727843666038697]
##White-box stabilization: 3.01351540984877 || K: [-0.28312813988790014 -0.29647902807944704]
##JSR closed: 3.013495908047195
##N: 25000 || JSR closed 1: 4.361339641605917 || K1: [-0.651004527631084 0.02797491475362021]
##N: 25000 || JSR closed 2: 2.9945408400720335 || K2: [-0.18150119321526154 -0.2400504391716816]
##N: 25000 || JSR closed Prob1: 4.367557105006393
##N: 25000 || JSR closed Prob2: 3.3727843666038697


##A = [[3.7951 0.4777; -3.2639 -3.6179], [4.1073 -0.9736; 1.8045 -2.1278]]
##B = [-2.7183; 2.3688]

##A = [[-2.4863 4.9076; 1.5580 -3.2878], [-0.2529 -1.0603; 2.3881 4.9242]]
##B = [1.1435; 1.9476]
##Any[8.370532899066617, 6.187095911542206, 5.84145466486238, 5.6928578727285455, 5.6422106988990315, 5.483080200501635, 5.514760283215316, 5.562694716182327, 5.571580746135338, 5.49819182839881, 5.507378578860731, 5.538420395466981, 5.529008550464572, 5.618853834095716, 5.560347716814375, 5.617553906114067, 5.616301274366272, 5.61287696775652, 5.612263567996752, 5.606516820923405, 5.511843891885627]       
##Any[10.747090196272392, 7.702281702464826, 6.812757741029949, 6.2596051681031035, 5.960238479547801, 5.724785018557283, 5.551537061471664, 5.410718628045469, 5.30133764066168, 5.210556792796057, 5.1348637522562575, 5.071234315820118, 5.013204771234054, 4.962438766185439, 4.921199273807425, 4.882110960189069, 4.855767673983964, 4.82386981845116, 4.795728016171695, 4.769418292300936, 4.747311345089707]     
##White-box stabilization: 3.9656700839325714 || K: [-0.8683244194245358 -0.5485599765184244]
##JSR closed: 3.965608491407373
##N: 21000 || JSR closed 1: 5.506434766615985 || K1: [-0.8594476289711871 -1.2410237558786164]
##N: 21000 || JSR closed 2: 4.067970658151304 || K2: [-0.8855679702001946 -0.3466089882223222]
##N: 21000 || JSR closed Prob1: 5.511843891885627
##N: 21000 || JSR closed Prob2: 4.747311345089707


##A = [[1.2847752917460404 -4.294823846678941; 0.3680548348155881 0.014732983067902161], [1.1712220013664698 -0.8818060555034961; 1.6530187731608859 -2.3732736764432127]]
##B = [0.32980020816855316; 2.992543632417817]

##A = [[-0.7758 -0.9779; 0.9748 0.7367], [0.7864 -0.2455; 0.9516 0.5357]]
##B = [-0.6358; -0.04498]

##A = [[-0.8350343770388022 -0.006107458495185014; 1.6179435194682048 0.08247284108420949], [-0.5991942074864163 -1.7792515399993318; 1.1279527670550538 0.9404192977577894]]
##B = [0.9917434505323639; 1.3179954593019438]

##A = [[-0.835 -0.006; 1.617 0.0825], [-0.599 -1.779; 1.128 0.9404]]
##B = [0.992; 1.318]

##A= [[2.196 3.187; 1.758 2.183], [2.4684 4.844; 1.383 4.565]]
##B= [-2.212; -1.980]


##A= [[2.1962930715063305 3.187441172268997; 1.7577099273813346 2.183228120757372], [2.4683584311233293 4.84422595233246; 1.3828879364062585 4.565095890995014]]
##B= [-2.212099386961055; -1.9795927901090082]

##A=[[2.671281119684634 -4.876263859500199; -4.392395002400294 2.7156007276877574], [4.645925349681839 2.206066227650134; -4.267978590442674 1.7848087937926742]]
##B= [3.743666731025746; -1.4650217059382165]


##A = [[-0.7757566511432756 -0.9778654656915116; 0.97480024345306 0.7366948958837525], [0.7863913424227396 -0.2454901059378174; 0.9515607611942283 0.535698625247981]]
##B = [-0.6357718059899597; -0.0449794151233891]

##A = [[0.3992966486009579 -0.8825975300456066; 0.9466203607162913 0.8220671916996221], [-0.05865322607237777 -0.32416336552150593; -0.5565696843656855 -0.8985422238439993]]
##B = [-0.5919429619683738; 0.18179898964335361]

##A = [[0.8388521952671368 -0.14857670536251177; 0.8633807216781597 0.490362061793125], [0.6013596101878895 0.6697432384693109; -0.12770751192259544 0.9150610500819121]]
##B = [0.9467520554779116; 0.20399193884377942]

B = reshape(B,dim,dimIn)
jsrbound = white_box_jsr(A)

gaTrue,K = white_box_stabilization_quad(A,B)
jsrboundclosed = white_box_jsr([Ai+B*K for Ai in A])

(state0_budget,state_budget) = generate_trajectories(1,A,numScen_budget)

K0 = zeros(dimIn,dim)

jrs_boundorder1 = []
jrs_boundorder2 = []
#=
for N in 200:100:1000
    K1,jsr_bound1 = probabilistc_stability_certificate(state0_budget[:,1:N],state_budget[:,1:N];B=B,numMode=numMode,d=1,batchsize=N,K0=K0,beta=0.01,tol=1e-3)
    K2,jsr_bound2 = probabilistc_stability_certificate(state0_budget[:,1:N],state_budget[:,1:N];B=B,numMode=numMode,d=2,batchsize=N,K0=K0,beta=0.01,tol=1e-3)

    append!(jrs_boundorder1,jsr_bound1)
    append!(jrs_boundorder2,jsr_bound2)

    Aclose1 = [Ai+B*K1 for Ai in A]
    jsrboundclose1 = white_box_jsr(Aclose1)
    Aclose2 = [Ai+B*K2 for Ai in A]
    jsrboundclose2 = white_box_jsr(Aclose2)

    println(repeat('*', 80))
    println("White-box stabilization: $gaTrue")
    println("JSR closed: $jsrboundclosed")
    println("N: $N|| JSR closed 1: $jsrboundclose1")
    println("N: $N|| JSR closed 2: $jsrboundclose2")

    println("N: $N|| JSR closed Prob1: $jsr_bound1")
    println("N: $N|| JSR closed Prob2: $jsr_bound2")

    println(repeat('*', 80))
    println(jrs_boundorder1)
    println(jrs_boundorder2)

end
=#


for N in 1000:1000:numScen_budget
    K1,jsr_bound1 = probabilistc_stability_certificate(state0_budget[:,1:N],state_budget[:,1:N];B=B,numMode=numMode,d=1,batchsize=1000,K0=K0,beta=0.01,tol=1e-4)
    K2,jsr_bound2 = probabilistc_stability_certificate(state0_budget[:,1:N],state_budget[:,1:N];B=B,numMode=numMode,d=2,batchsize=1000,K0=K0,beta=0.01,tol=1e-4)

    append!(jrs_boundorder1,jsr_bound1)
    append!(jrs_boundorder2,jsr_bound2)

    Aclose1 = [Ai+B*K1 for Ai in A]
    jsrboundclose1 = white_box_jsr(Aclose1)
    Aclose2 = [Ai+B*K2 for Ai in A]
    jsrboundclose2 = white_box_jsr(Aclose2)

    println(repeat('*', 80))
    println("White-box stabilization: $gaTrue || K: $K")
    println("JSR closed: $jsrboundclosed")
    println("N: $N || JSR closed 1: $jsrboundclose1 || K1: $K1")
    println("N: $N || JSR closed 2: $jsrboundclose2 || K2: $K2")

    println("N: $N || JSR closed Prob1: $jsr_bound1")
    println("N: $N || JSR closed Prob2: $jsr_bound2")

    println(repeat('*', 80))
    println(jrs_boundorder1)
    println(jrs_boundorder2)

end

#=
using Plots
gr(size = (450, 400))
fn = plot(1000:1000:25000, Any[jrs_boundorder1,jrs_boundorder2,fill(jsrboundclosed,25)],xticks = (5000:5000:25000, string.(5000:5000:25000)), xtickfontsize=8,ytickfontsize=12,label = ["Quadratic stabilization" "SOS stabilization (d=2)" ""],line = [:solid :solid :dashdot], lw = 2)
xlabel!("N")
ylabel!("Upper bound of the closed-loop JSR")
savefig(fn,"fn.png")

jrs_boundorder1 = [8.595098769674822, 5.840679902801846, 5.811875529890767, 5.6722257356414945, 5.67299484581915, 5.271039662245451, 5.60428293458043, 5.600297212959155, 5.6312980507395745, 5.625358913593358, 5.607825800405484, 5.603517531302264]
jrs_boundorder2 = [11.121139350134298, 7.678201860264276, 6.78494588724533, 6.281737427184408, 5.948202603570425, 5.717780994064778, 5.547373903923299, 5.407482275161193, 5.2937570819690025, 5.210422326909742, 5.133632949484108, 5.06780663383821]
=#


