using LinearAlgebra
using DynamicPolynomials
using SwitchOnSafety
using Combinatorics
using SparseArrays
using JuMP, Ipopt, MosekTools,NLopt




include("RandomTrajectories.jl")
include("AlgebraicLift.jl")
include("ScenarioOpti.jl")
include("JSRCompute.jl")



dim = 2; numMode = 2; dimIn = 2

numScen_budget = 1000


while true

A = [2*rand(Float64, (dim, dim)).-1 for i=1:numMode]
#A = [[1 1; 0 1], [1 0; 1 1]]
println(A)
jsrbound = white_box_jsr(A)
println("JSR: $jsrbound")

rhomax = 0
for i in 1:numMode
    rhoA = maximum(abs.(eigvals(A[i])))
    if rhomax < rhoA
        rhomax = rhoA
    end
end
println("Eigenvalue max: $rhomax")

if rhomax < jsrbound*0.98 && jsrbound > 1.1


B = 2*rand(Float64, (dim, dimIn)).-1
gaTrue,K = white_box_stabilization_quad(A,B)
println("White-box stabilization: $gaTrue")
println(K)
jsrboundclosed = white_box_jsr([Ai+B*K for Ai in A])
println("JSR closed: $jsrboundclosed")
if jsrboundclosed > 1.1


#=
gamma1: 1.091098994365357 || K1: [0.4450968546375577 -0.0067944232635188 -0.07242928507366847; -1.0901373033935469 -0.6362471475237879 -0.6546310496281078]
gamma2: 1.0043051965701504 || K2: [-0.017481932047868836 -0.019322752052078965 -0.13267775176698232; -0.16816570986167362 -0.16848413512732924 -0.1473949009786114]
gamma3: 0.9319170550393475 || K3: [0.2185895965435866 0.0828529524089513 -0.10940266352022417; -0.4330159942259682 -0.2689004267861104 -0.36664805316411]
A: [[-0.035713556139526315 -0.46101936337212224 0.5758464004636243; 0.5365323737379186 -0.4238668271399051 -0.15898425119264026; 0.8419591377106763 -0.12433448826055438 0.08762970902198686], [0.7536818225043662 0.8448230972467972 -0.5723985482099347; -0.01764965739578206 -0.726360371394331 0.919109231975153; -0.7616763202127323 -0.45233767277561787 0.8890705069340319], [0.9675539515043958 0.33014694100762054 0.7845206390342243; -0.7664059406402712 -1.4599068229700047 -1.374238975340281; -0.9919933573988242 0.032139509230417085 -0.7241320070196489]]
B: [-0.9738898776106395 0.2430937821271404; -0.5594898459836832 -0.8567879128803524; 0.968034729630463 0.23321416718508736]


gamma1: 1.4771721521387928 || K1: [1.5837457868149079 -0.4143607875557178 -0.8926641693341837; 2.2458480283900912 -0.49739409437647436 0.12379794005429769]
gamma2: 1.1284125028892853 || K2: [1.169458826476936 1.0133947633814673 -0.483014379311149; 2.141282305221211 0.557871222870866 0.4928558882834438]
gamma3: 0.9586177379188866 || K3: [1.4852632106087928 0.768086923841151 -0.7357944137203406; 2.569449416459834 1.45216594818393 -0.6464578631991]
A: [[0.30711010163057084 0.35743471478281297 -0.4165467097338529; -1.2090478525084418 -1.0889753204734136 0.6606482717761146; 1.4916720938947043 0.712750594788254 -0.9494855947533352], [0.07478000105066651 1.2354131020593702 1.3717629013640442; -0.800207539428841 -1.2193833745904425 0.6737888109652435; 0.833849823841502 0.5815076492256317 0.31055833688134005], [0.43205427033385724 -1.2518407274846475 1.285786041398043; -0.8350914889424306 1.3566196051386124 0.5088045250037383; 1.0077852528903604 1.4886588615734646 1.2656260379533943]]
B: [0.8021437835254663 -0.6833724710101055; 0.6501895221291156 -0.07049181782485858; 0.2859499732121846 -0.6349752471957584]

gamma1: 1.018066677187341 || K1: [2.584474642796141 -0.24162143938208935 0.099462950616573; -1.2867193442164662 0.13807898609460512 -0.19437308433321066]
gamma2: 0.9832197222746352 || K2: [1.1463420634669867 -0.3221344185415759 -0.43056835102089497; -0.510805330235787 0.16847443653003535 0.09598776622354863]
gamma3: 0.9253726445472554 || K3: [0.4026290483392731 0.3331629002414559 -0.4362828807087034; -0.16661137825136454 -0.2450569921574039 0.12637508003535894]
A: [[-0.30800169258330756 0.9505145074280321 -0.6259941895718011; -0.09813858442579693 0.04701685427672242 0.47999535937466775; -0.5337119123653387 -1.22263351642073 1.0250969836175772], [-0.7760395797649433 
0.44231108160967914 -0.7322470977044158; -1.0076425423418636 0.8040581854952427 0.36770750935111374; -1.2752392250900568 0.1577843128284635 -0.04355988747606543], [0.8510269920574687 -0.7025377021362369 0.3662889318400304; -1.2401443442753204 0.5192000830316674 -0.8306209038179504; -1.308005763363062 0.8883944328469036 -0.7044580923902992]]
B: [-0.673706431037024 -0.9942210379640635; 0.5887891646350618 0.816544078417563; 0.5846952620521035 -0.08410769825592324]

gamma1: 1.2655581866366972 || K1: [-0.7523606179678266 -0.313855132517474 -0.18146019093303392; -1.598699415329922 0.40263117664776193 0.14878090883819198]
gamma2: 0.9418593783946065 || K2: [-1.1860831186635448 0.2616062380247517 -0.8299427094969802; -1.1238095874215457 0.43745239624058097 0.016050395816995855]
gamma3: 0.8821086726589813 || K3: [-0.8968314046121041 -0.14999943896045986 -0.6103608545100961; -1.1547588693711313 -0.33652194601647034 0.49950344977932337]
A: [[1.0595043843018859 -0.6438627791708056 0.00723522344691041; 0.2583554978549165 0.06987763899547095 -0.8988079061161514; -0.289275086715185 0.2213995411678067 -1.289514635518868], [-0.07381204441025302 0.194844991033865 -0.2028082999442229; -1.450850561219815 -0.7939044396088417 -0.22192956007240272; 0.6725331583952081 -1.449399767981382 0.08236411024717127], [1.4015273027335442 -1.4414767057887359 0.16407460676712216; 1.1077681042753422 -1.4266521231371279 -0.6003075175361281; -0.1589603499259864 0.9127473107730948 -1.0781043037842029]]
B: [0.1296346994002282 0.16628258052872047; -0.8117363096670669 0.12530345308656266; -0.8660337247723389 0.6781414601703961]


gamma1: 1.100564798387133 || K1: [-0.4754988921219234 0.9686501257953164]
gamma2: 0.9659557480414829 || K2: [-0.5608615591223438 0.6780315365664531]
A: [[1.2151079530621365 -0.33531513729513973; 1.2900511328638773 -1.3708985625995862], [-0.3408550384526632 -1.4962998078843397; 0.6784775763322353 -0.5621789240840522]]
B: [1.2212436025566022; 1.2344115037249868]

gamma1: 1.237023188862944 || K1: [1.6656380348300133 -1.5018804552577114]
gamma2: 0.8912866616247893 || K2: [1.2853564948996887 -0.9904177141477473]
A: [[-0.19602867727143058 0.9066579411992075; -1.191682425218234 -0.8165764607928059], [-1.4500928127989938 0.4987795138241713; -1.4907935439044315 0.13680174640346343]]
B: [0.5051340748481175; 0.35155906853515373]

White-box stabilization: 1.2515596315140356
gamma1: 1.21804211145584 || K1: [-0.49492771379150446 0.17138754707168224]
gamma2: 1.1025805507623097 || K2: [-0.8109269218012012 -0.22648847280226433]
A: [[0.5321293666918354 -1.4093176949123007; 0.3913118072170749 1.186645538188861], [-0.6346354185840684 0.4569919176747286; 0.9401935791262526 -0.4447425946384207]]
B: [0.48123383347242177; 0.6004781313788943]

White-box stabilization: 1.1252337292756291
gamma2: 0.9670755795170983 || K2: [-1.7872748458126402e-8 -1.2461763794928268e-7]
gamma1: 1.2610314995182843 || K1: [0.4979140858258914 -0.044031696357208806]
gamma2: 0.9670755795170983 || K2: [-1.7872748458126402e-8 -1.2461763794928268e-7]
A: [[1.1 0.0; 1.1 0.0], [0.0 1.1; 0.0 -1.1]]
B: [-0.9295420348363925; -0.7283669003038016]


********************************************************************************
White-box stabilization: 1.6996993773113758
JSR closed: 1.4442237715227517
JSR closed 1: 1.3356865279982715
JSR closed 2: 1.1956673430584541
********************************************************************************
gamma1: 1.3359320418484906 || K1: [0.9602082951808819 0.28190789741712763]
gamma2: 1.1972912108912892 || K2: [0.9473315633445621 0.4586615830219181]
A: [[0.299560690718218 0.9921279903594802; -0.5828937405932029 -1.4334283024388252], [-0.5717533245191793 0.9926090534389171; -1.0977155184013296 0.881840305882942]]
B: [0.6311748433573756; 0.9416093511508103]
=#


(state0_budget,state_budget) = generate_trajectories(1,A,numScen_budget)


batchsize = numScen_budget

K0 = zeros(dimIn,dim)
tol = 1e-3

K1,ga1,P1 = soslyap_alternating(state0_budget,state_budget,B,1,batchsize,K0,tol)
println("gamma1: $ga1 || K1: $K1")
Aclose1 = [Ai+B*K1 for Ai in A]
jsrboundclose1 = white_box_jsr(Aclose1)
if jsrboundclose1 >1.1

    K2,ga2,P2 = soslyap_alternating(state0_budget,state_budget,B,2,batchsize,K0,tol)
    println("gamma2: $ga2 || K2: $K2")
    Aclose2 = [Ai+B*K2 for Ai in A]
    jsrboundclose2 = white_box_jsr(Aclose2)

    println(repeat('*', 80))
    println("White-box stabilization: $gaTrue")
    println("JSR closed: $jsrboundclosed")
    println("JSR closed 1: $jsrboundclose1")
    println("JSR closed 2: $jsrboundclose2")
    println(repeat('*', 80))

if jsrboundclose2 < 0.9
    println("gamma1: $ga1 || K1: $K1")
    println("gamma2: $ga2 || K2: $K2")
    println("A: $A")
    println("B: $B")
    break
end
end
end
end


end
