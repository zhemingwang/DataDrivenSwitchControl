using LinearAlgebra
using DynamicPolynomials
using SwitchOnSafety
using Combinatorics
using SparseArrays
using JuMP, MosekTools
using SpecialFunctions

include("../src/RandomTrajectories.jl")
include("../src/AlgebraicLift.jl")
include("../src/ScenarioOpti.jl")
include("../src/ProbabilisticCertificates.jl")
include("../src/WhiteBoxAnalysis.jl")


dim = 3; numMode = 3; dimIn = 2

numScen_budget = 2000

A = [[-0.1 -0.50 -0.4; 1 0.2 0.1; 0 -0.9 0.8], [-0.1 0.9 -0.4; 0.5 0.9 -0.8; -0.8 0.5 0.5], [0.5 0.1 0.4; 0.8 0.8 0.2; -0.2 -0.9 -0.5]]
B = [-0.6 0; 0.6 0.8; -0.8 -0.3]

jsrboundopen= white_box_jsr(A)
println("JSR open loop (white-box): $jsrboundopen")
gaTrue,KTrue = white_box_stabilization_quad(A,B)
println("gamma (white-box): $gaTrue")
jsrboundcloseTrue = white_box_jsr([Ai+B*KTrue for Ai in A])
println("JSR closed (whitebox): $jsrboundcloseTrue")


(state0_budget,state_budget) = generate_trajectories(1,A,numScen_budget)
K0 = zeros(dimIn,dim)

K,jsr_bound,ga,P = probabilistc_stability_certificate(state0_budget,state_budget;B=B,numMode=numMode,d=1,batchsize=numScen_budget,K0=K0,beta=0.01,tol=1e-3)

println("gamma (sampled): $ga")
println("JSR bound (probabilistic): $jsr_bound")

Aclose = [Ai+B*K for Ai in A]
jsrboundclose = white_box_jsr(Aclose)
println("JSR closed: $jsrboundclose")
println("P: $P")




